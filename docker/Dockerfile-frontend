# Use node 6.11 as the base image
FROM node:6.11.1

# Install Google Chrome 
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list' \
    && apt-get update && apt-get install -y google-chrome-stable \
    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

ENV CHROME_BIN /usr/bin/google-chrome
# create a top level node directory and copy the frontend package.json
# into it
# set the work dir to /node
RUN mkdir -p /node
COPY ./frontend/package.json /node
WORKDIR /node

# install the latest version of yarn
RUN npm install yarn -g

# run yarn to get all dependencies
RUN yarn

# change the node path env var to the new node_modules directory
# and add the new node .bin to the path
ENV NODE_PATH=/node/node_modules
ENV PATH=/node/node_modules/.bin:$PATH

# set the workdir as the /app directory
# this dir is mapped to the frontend directory in the cloned repo
WORKDIR /app

# Make port 4200 available to the world outside this container
EXPOSE 4200

# create a symlink to the new node_modules in the app dir
# so that angular can find the node modules
# angular-cli won't use the NODE_PATH for node package lookup
# https://github.com/angular/angular-cli/issues/3864
RUN ln -s /node/node_modules /app/node_modules

# startup the angular server when the container launches
# ensure a host of 0.0.0.0 so that port forwarding works correctly
CMD ["/node/node_modules/.bin/ng", "serve", "--host", "0.0.0.0"]
