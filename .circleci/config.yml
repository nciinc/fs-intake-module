version: 2
jobs:
  run-all-other-tests:
    machine: true
    steps:
      - checkout
      # - run:
      #     name: Install typedoc
      #     command: sudo yarn global add typedoc
      - run:
          name: install dependencies
          command: cd docker; ../.circleci/install-dependencies.sh
      # - run:
      #     name: run dist on frontend
      #     command: cd docker; docker-compose run fs-intake-frontend yarn dist-staging
      # - run:
      #     name: seed db with intake data
      #     command: cd docker; docker-compose run fs-intake-server yarn seed-ci
## Run tests
      # - run:
      #     name: pa11y test
      #     command: .circleci/pa11y.sh
      # - run:
      #     name: frontend unit tests
      #     command: cd docker; docker-compose run fs-intake-frontend yarn run test:ci
      # - run:
      #     name: frontend linting
      #     command: cd docker; docker-compose run fs-intake-frontend yarn run lint
      # - run:
      #     name: server unit tests
      #     command: cd docker; docker-compose run fs-intake-server yarn coverage
      # - run:
      #     name: server linting
      #     command: cd docker; docker-compose run fs-intake-server yarn run lint
      - run:
          name: server snyk tests
          command: cd docker; docker-compose run -e SNYK_TOKEN=$TEST_SNYK_TOKEN fs-intake-server yarn run snyk-test
      - run:
          name: frontend snyk tests
          command: cd docker; docker-compose run -e SNYK_TOKEN=$TEST_SNYK_TOKEN fs-intake-frontend yarn run snyk-test
      # - run:
      #     name: generate typedocs
      #     command: cd frontend; yarn run docs
      - store_artifacts:
          path: frontend/coverage
          prefix: frontend-coverage
      - store_artifacts:
          path: server/coverage
          prefix: server-coverage

  run-e2e:
    machine: true
    parallelism: 4
    steps:
      - checkout
      - run:
          name: install yarn
          command: cd docker; docker-compose run fs-intake-frontend sudo npm i -g yarn; docker-compose run fs-intake-server sudo npm i -g yarn
      # - run:
      #     name: Install angular cli
      #     command: sudo yarn global add @angular/cli
      # - run:
      #     name: Install typedoc
      #     command: sudo yarn global add typedoc
      # - run:
      #     name: Install sequelize
      #     command: yarn global add sequelize-cli
      - run:
          name: install dependencies
          command: cd docker; ../.circleci/install-dependencies.sh
## Setting up DB
      # - run:
      #     name: Migrate db
      #     command: cd server; ./node_modules/sequelize-cli/lib/sequelize db:migrate
      - run:
          name: seed db with intake data
          command: cd docker; docker-compose run fs-intake-server yarn seed-ci
      # - run:
      #     name: seed db with trees data
      #     command: cd server; yarn seed
      # - run:
      #     name: install protractor
      #     command: cd frontend; sudo npm install -g protractor
## Run tests
      - run:
          name: run e2e
          command: cd docker; ../.circleci/run-e2e.sh $(circleci tests split <( cd frontend; circleci tests glob ./e2e/*.e2e-spec.ts))
      - run:
          name: run unauthenticated e2e 
          command: cd docker; ../.circleci/run-unauthenticated-e2e.sh
          environment:
            PLATFORM: 'not ci'
      - store_artifacts:
          path: frontend/e2e-test-results
          prefix: e2e-results

  staging-deploy:
    docker:
      - image: circleci/node:6.12.0
    steps:
      - checkout
      - run:
          name: remove yarn dependencies
          command: rm -rf ~/.yarn
      - run:
          name: instal yarn
          command: sudo npm i -g yarn
      - run:
          name: install dependencies
          command: .circleci/install-dependencies.sh
      - run:
          name: Run update script
          command: cd frontend; yarn run update-version;
      - run:
          name: Create dist
          command: cd frontend; yarn dist-trees;
      - run:
          name: deploy
          command: |
            if [ "${CIRCLE_PROJECT_USERNAME}" == "nciinc" ];
              then ./.cg-deploy/deploy.sh public-trees-staging;
            fi

  prod-deploy:
    docker:
      - image: circleci/node:6.12.0
    steps:
      - checkout
      - run:
          name: remove yarn dependencies
          command: rm -rf ~/.yarn
      - run:
          name: instal yarn
          command: sudo npm i -g yarn
      - run:
          name: install dependencies
          command: .circleci/install-dependencies.sh
      - run:
          name: Run update script
          command: cd frontend; yarn run update-version;
      - run:
          name: Create dist
          command: cd frontend; yarn dist-prod;
      - run:
          name: deploy
          command: |
            if [ "${CIRCLE_PROJECT_USERNAME}" == "18F" ];
              then ./.cg-deploy/deploy.sh public-production;
            fi

workflows:
  version: 2
  build-deploy:
    jobs:
      - run-all-other-tests:
          requires:
      - run-e2e:
          requires:
      - staging-deploy:
          requires:
            - run-all-other-tests
            - run-e2e
          filters:
            branches:
              only: sprint-6-development
      - prod-deploy:
          requires:
            - run-all-other-tests
            - run-e2e
          filters:
            branches:
              only: master
