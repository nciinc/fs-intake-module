version: 2
jobs:
  run-all-other-tests:
    machine: true
    environment:
      - DATABASE_URL: "postgres://ubuntu@localhost/circle_test"
    steps:
      - checkout
      - run:
          name: run npm install
          command: cd frontend; npm i
      - run:
          name: install eslint
          command: cd server; npm i -g eslint && npm i snyk
      - run:
          name: frontend linting
          command: cd frontend; npm run lint
      - run:
          name: frontend snyk
          command: cd frontend; npm run snyk-test
      - run:
          name: server linting
          command: cd server; npm run lint
      - run:
          name: server snyk
          command: cd server; npm run snyk-test
      - run:
          name: copy frontend assets into server
          command: cd server; ./copy-frontend-assets.sh
      - run:
          name: build docker compose images
          command: cd docker; ../.circleci/build-docker-images.sh
      - run:
          name: install dependencies
          command: cd docker; ../.circleci/install-dependencies-docker.sh
      - run:
          command: cd frontend; ls
      - run:
          command: cd frontend; ls node_modules
      - run:
          command: cd frontend; pwd
      - run:
          command: cd docker; docker-compose ps
      - run:
          command: cd docker; docker ps -a
## Run tests
      - run:
          name: frontend unit tests
          command: cd docker; docker-compose run fs-intake-frontend yarn run test:ci
      - run:
          name: server unit tests
          command: cd docker; docker-compose run fs-intake-server yarn coverage
      - store_artifacts:
          path: frontend/coverage
          prefix: frontend-coverage
      - store_artifacts:
          path: server/coverage
          prefix: server-coverage

  run-e2e:
    machine: true
    parallelism: 4
    environment:
      - DATABASE_URL: "postgres://ubuntu@localhost/circle_test"
    steps:
      - checkout
      - run:
          name: install jq
          command: sudo apt-get update && sudo apt-get install jq
      - run:
          name: copy frontend assets into server
          command: cd server; ./copy-frontend-assets.sh
      - run:
          name: build docker compose images
          command: cd docker; ../.circleci/build-docker-images.sh
      - run:
          name: install dependencies
          command: cd docker; ../.circleci/install-dependencies-docker.sh
## Run tests
      - run:
          name: run e2e
          command: cd docker; ../.circleci/run-e2e.sh -a $(circleci tests split <( cd ../frontend; circleci tests glob ./e2e/authenticated/**/*.e2e-spec.ts))
      - run:
          name: run unauthenticated e2e
          command: cd docker; ../.circleci/run-e2e.sh -u 
      - run:
          name: install aws cli
          command: sudo apt-get install -y awscli
      - run:
          name: clean s3 bucket
          command: ./.circleci/clean-s3-bucket.sh
      - store_artifacts:
          path: frontend/e2e-test-results
          prefix: e2e-results
      - store_artifacts:
          path: frontend/e2e-unauth-test-results
          prefix: unauth-e2e-results

  run-pa11y:
    machine: true
    steps:
      - checkout
      - run:
          name: Install node@8.9.4
          command: |
            set +e
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install v8.9.4
            nvm alias default v8.9.4
            
            # Each step uses the same `$BASH_ENV`, so need to modify it
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV
      - run:
          name: install pa11y
          command: cd frontend; npm i -g pa11y-ci && npm i
      - run:
          name: pa11y test
          command: cd docker; ../.circleci/pa11y.sh

  staging-deploy:
    docker:
      - image: circleci/node:8.9.4
    steps:
      - checkout
      - run:
          name: remove yarn dependencies
          command: rm -rf ~/.yarn
      - run:
          name: install yarn
          command: sudo npm i -g yarn
      - run:
          name: install dependencies
          command: .circleci/install-dependencies.sh
      - run:
          name: Run update script
          command: cd frontend; yarn run update-version;
      - run:
          name: generate typedocs
          command: cd frontend; yarn run docs
      - run:
          name: Create dist
          command: cd frontend; yarn dist-trees;
      - run:
          name: copy frontend assets into server
          command: cd server; ./copy-frontend-assets.sh
      - run:
          name: deploy
          command: |
            if [ "${CIRCLE_PROJECT_USERNAME}" == "nciinc" ];
              then ./.cg-deploy/deploy.sh public-trees-staging;
            fi

  prod-deploy:
    docker:
      - image: circleci/node:8.9.4
    steps:
      - checkout
      - run:
          name: remove yarn dependencies
          command: rm -rf ~/.yarn
      - run:
          name: instal yarn
          command: sudo npm i -g yarn
      - run:
          name: install dependencies
          command: .circleci/install-dependencies.sh
      - run:
          name: Run update script
          command: cd frontend; yarn run update-version;
      - run:
          name: generate typedocs
          command: cd frontend; yarn run docs
      - run:
          name: Create dist
          command: cd frontend; yarn dist-prod;
      - run:
          name: copy frontend assets into server
          command: cd server; ./copy-frontend-assets.sh
      - run:
          name: deploy
          command: |
            if [ "${CIRCLE_PROJECT_USERNAME}" == "18F" ];
              then ./.cg-deploy/deploy.sh public-production;
            fi

workflows:
  version: 2
  build-deploy:
    jobs:
      - run-all-other-tests:
          requires:
      - run-e2e:
          requires:
      - run-pa11y:
          requires:
          filters:
            branches:
              only: sprint-11-development
      - staging-deploy:
          requires:
            - run-all-other-tests
            - run-e2e
            - run-pa11y
          filters:
            branches:
              only: sprint-11-development
      - prod-deploy:
          requires:
            - run-all-other-tests
            - run-e2e
            - run-pa11y
          filters:
            branches:
              only: master
